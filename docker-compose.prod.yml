version: "3.8"

# Production configuration for the RAG platform
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  # PostgreSQL Database with production settings
  postgres:
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data

  # Redis with production settings
  redis:
    restart: always
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_prod_data:/data

  # Elasticsearch with production settings
  elasticsearch:
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_prod_data:/usr/share/elasticsearch/data

  # ChromaDB with production settings
  chromadb:
    restart: always
    volumes:
      - chromadb_prod_data:/chroma/chroma

  # Backend API with production settings
  backend:
    restart: always
    environment:
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - VECTOR_DB_PROVIDER=${VECTOR_DB_PROVIDER}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - LOG_LEVEL=INFO
      - ENABLE_METRICS=true
    volumes:
      - upload_prod_data:/app/uploads
    command: gunicorn app.main:app -w 4 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000

  # Celery Worker with production settings
  celery-worker:
    restart: always
    environment:
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - VECTOR_DB_PROVIDER=${VECTOR_DB_PROVIDER}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - LOG_LEVEL=INFO
    volumes:
      - upload_prod_data:/app/uploads
    command: celery -A app.celery worker --loglevel=info --concurrency=4

  # Celery Beat with production settings
  celery-beat:
    restart: always
    environment:
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - VECTOR_DB_PROVIDER=${VECTOR_DB_PROVIDER}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - LOG_LEVEL=INFO
    volumes:
      - celery_prod_data:/app/celerybeat-schedule

  # Frontend with production settings
  frontend:
    restart: always
    environment:
      - VITE_API_BASE_URL=${FRONTEND_API_URL}
      - VITE_API_VERSION=v1
      - VITE_DEV_MODE=false
      - VITE_ENABLE_LOGGING=false

  # Prometheus with production settings
  prometheus:
    restart: always
    volumes:
      - prometheus_prod_data:/prometheus

  # Grafana with production settings
  grafana:
    restart: always
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=false
    volumes:
      - grafana_prod_data:/var/lib/grafana

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: rag-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    restart: always

volumes:
  postgres_prod_data:
  redis_prod_data:
  elasticsearch_prod_data:
  chromadb_prod_data:
  upload_prod_data:
  celery_prod_data:
  prometheus_prod_data:
  grafana_prod_data: